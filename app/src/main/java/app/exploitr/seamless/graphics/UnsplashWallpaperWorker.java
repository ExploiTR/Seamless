package app.exploitr.seamless.graphics;

import android.graphics.Bitmap;
import android.graphics.drawable.Drawable;

import androidx.annotation.NonNull;

import com.google.gson.annotations.SerializedName;
import com.squareup.picasso.Picasso;
import com.squareup.picasso.Target;

import java.util.List;

import retrofit2.Call;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;
import retrofit2.http.GET;
import retrofit2.http.Query;

public class UnsplashWallpaperWorker {
    private static final String BASE_URL = "https://api.unsplash.com/";
    private static final String ACCESS_KEY = "YOUR_UNSPLASH_ACCESS_KEY";

    private final UnsplashService unsplashService;

    /**
     * Constructor for UnsplashWallpaperWorker.
     * It initializes the Retrofit service for making API requests.
     */
    public UnsplashWallpaperWorker() {
        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(BASE_URL)
                .addConverterFactory(GsonConverterFactory.create())
                .build();

        unsplashService = retrofit.create(UnsplashService.class);
    }

    /**
     * Fetches random photos from Unsplash based on optional filters.
     *
     * @param query         Optional search term to filter photos.
     * @param orientation   Optional photo orientation filter (landscape, portrait, or squarish).
     * @param contentFilter Optional content safety filter (low or high).
     * @param callback      Callback to handle the response with fetched photos or error.
     */
    public void getRandomPhotos(String query, String orientation, String contentFilter, UnsplashCallback callback) {
        Call<List<UnsplashPhoto>> call = unsplashService.getRandomPhotos(ACCESS_KEY, query, orientation, contentFilter, 10);
        call.enqueue(new retrofit2.Callback<List<UnsplashPhoto>>() {
            @Override
            public void onResponse(@NonNull Call<List<UnsplashPhoto>> call, @NonNull retrofit2.Response<List<UnsplashPhoto>> response) {
                if (response.isSuccessful()) {
                    List<UnsplashPhoto> photos = response.body();
                    if (photos != null) {
                        callback.onSuccess(photos);
                    } else {
                        callback.onError("No photos found");
                    }
                } else {
                    callback.onError("Failed to get photos");
                }
            }

            @Override
            public void onFailure(@NonNull Call<List<UnsplashPhoto>> call, Throwable t) {
                callback.onError(t.getMessage());
            }
        });
    }

    /**
     * Downloads an image using the provided image URL and Picasso library.
     *
     * @param imageUrl Image URL to download.
     * @param callback Callback to handle the downloaded image or error.
     */
    public void downloadImage(String imageUrl, UnsplashDownloadCallback callback) {
        Target target = new Target() {
            @Override
            public void onBitmapLoaded(Bitmap bitmap, Picasso.LoadedFrom from) {
                callback.onDownloadSuccess(bitmap);
            }

            @Override
            public void onBitmapFailed(Exception e, Drawable errorDrawable) {
                callback.onDownloadError("Failed to download image");
            }

            @Override
            public void onPrepareLoad(Drawable placeHolderDrawable) {
                // Do nothing
            }
        };

        Picasso.get().load(imageUrl).into(target);
    }

    /**
     * Retrofit service interface for Unsplash API requests.
     */
    interface UnsplashService {
        @GET("photos/random")
        Call<List<UnsplashPhoto>> getRandomPhotos(
                @Query("client_id") String clientId,
                @Query("query") String query,
                @Query("orientation") String orientation,
                @Query("content_filter") String contentFilter,
                @Query("count") int count
        );
    }

    /**
     * Callback interface for handling the downloaded image.
     */
    public interface UnsplashCallback {
        void onSuccess(List<UnsplashPhoto> photos);

        void onError(String message);
    }

    /**
     * Callback interface for handling the downloaded image.
     */
    public interface UnsplashDownloadCallback {
        void onDownloadSuccess(Bitmap bitmap);

        void onDownloadError(String message);
    }

    /**
     * Inner class representing the UnsplashPhoto object received from Unsplash API.
     */
    public static class UnsplashPhoto {
        @SerializedName("id")
        private String id;

        @SerializedName("urls")
        private UnsplashUrls urls;

        public String getId() {
            return id;
        }

        public void setId(String id) {
            this.id = id;
        }

        public UnsplashUrls getUrls() {
            return urls;
        }

        public void setUrls(UnsplashUrls urls) {
            this.urls = urls;
        }

        public static class UnsplashUrls {
            @SerializedName("regular")
            private String regularUrl;

            public String getRegularUrl() {
                return regularUrl;
            }

            public void setRegularUrl(String regularUrl) {
                this.regularUrl = regularUrl;
            }
        }
    }

}

