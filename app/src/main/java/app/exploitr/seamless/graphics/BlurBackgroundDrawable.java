package app.exploitr.seamless.graphics;

import android.Manifest;
import android.app.WallpaperManager;
import android.content.Context;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.renderscript.Allocation;
import android.renderscript.Element;
import android.renderscript.RenderScript;
import android.renderscript.ScriptIntrinsicBlur;
import android.util.DisplayMetrics;
import android.view.WindowManager;

import androidx.annotation.NonNull;
import androidx.core.app.ActivityCompat;

public class BlurBackgroundDrawable {
    private static final float BLUR_RADIUS = 25f; // Adjust the blur strength here

    public static Bitmap getBlurBitmap(@NonNull Context context, @NonNull WindowManager manager, @NonNull Bitmap bitmap) {
        DisplayMetrics displayMetrics = new DisplayMetrics();
        manager.getDefaultDisplay().getMetrics(displayMetrics);

        Bitmap finalMap;

        int left = 0;     // X-coordinate of the left edge of the region
        int top = 0;        // Y-coordinate of the top edge of the region
        int right = displayMetrics.widthPixels;    // X-coordinate of the right edge of the region
        int bottom = displayMetrics.heightPixels; // Y-coordinate of the bottom edge of the region

        //todo ask user scaling mode and manual adjust image position
        if (right > bitmap.getWidth() || bottom > bitmap.getHeight()) {
            finalMap = Bitmap.createScaledBitmap(bitmap, displayMetrics.widthPixels, displayMetrics.heightPixels, true);
        } else
            finalMap = Bitmap.createBitmap(bitmap, left, top, right - left, bottom - top);

        RenderScript renderScript = RenderScript.create(context);
        final Allocation input = Allocation.createFromBitmap(renderScript, finalMap);
        final Allocation output = Allocation.createTyped(renderScript, input.getType());
        final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create(renderScript, Element.U8_4(renderScript));
        script.setRadius(BLUR_RADIUS);
        script.setInput(input);
        script.forEach(output);
        output.copyTo(finalMap);
        renderScript.destroy();
        return finalMap;
    }

    public static Bitmap getCurrentWallpaperBitmap(Context context) {
        WallpaperManager wallpaperManager = WallpaperManager.getInstance(context);
        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            return null; //todo
        }
        Drawable wallpaperDrawable = wallpaperManager.getDrawable();

        // Ensure the wallpaperDrawable is a BitmapDrawable
        if (wallpaperDrawable instanceof BitmapDrawable) {
            return ((BitmapDrawable) wallpaperDrawable).getBitmap();
        } else {
            // Convert non-BitmapDrawable to a BitmapDrawable
            return drawableToBitmap(wallpaperDrawable);
        }
    }

    private static Bitmap drawableToBitmap(Drawable drawable) {
        int width = drawable.getIntrinsicWidth();
        int height = drawable.getIntrinsicHeight();
        Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(bitmap);
        drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
        drawable.draw(canvas);
        return bitmap;
    }
}

