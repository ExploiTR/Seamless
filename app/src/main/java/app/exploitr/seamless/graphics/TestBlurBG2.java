package app.exploitr.seamless.graphics;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapShader;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Shader;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.util.AttributeSet;

import androidx.appcompat.widget.AppCompatImageView;

public class TestBlurBG2 extends AppCompatImageView {

    private Bitmap originalBitmap;
    private Bitmap circularBitmap; // Create a bitmap field to reuse
    private boolean useCircularMask = true;

    public TestBlurBG2(Context context) {
        super(context);
    }

    public TestBlurBG2(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public TestBlurBG2(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
    }

    @Override
    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
        super.onLayout(changed, left, top, right, bottom);
        init();
    }

    private void init() {
        // Initialize the bitmap field with an empty bitmap
        circularBitmap = Bitmap.createBitmap(getWidth(), getHeight(), Bitmap.Config.ARGB_8888);
    }

    public void setImageBitmapWithCircularMask(Bitmap bitmap) {
        originalBitmap = bitmap;
        invalidate();
    }

    public void setUseCircularMask(boolean useCircularMask) {
        this.useCircularMask = useCircularMask;
        invalidate();
    }

    @Override
    protected void onDraw(Canvas canvas) {
        if (originalBitmap == null) {
            super.onDraw(canvas);
            originalBitmap = drawableToBitmap(getDrawable());
            invalidate();
            return;
        }

        if (useCircularMask) {
            // Pass the bitmap field as a parameter to modify it in place
            getCircularBitmap(originalBitmap, circularBitmap);
            canvas.drawBitmap(circularBitmap, 0, 0, null);
        } else {
            super.onDraw(canvas);

        }
    }

    // Add a second parameter for the output bitmap
    private void getCircularBitmap(Bitmap inputBitmap, Bitmap outputBitmap) {
        int width = inputBitmap.getWidth();
        int height = inputBitmap.getHeight();

        Canvas canvas = new Canvas(outputBitmap);

        Paint paint = new Paint();
        paint.setAntiAlias(true);

        // Create a bitmap shader from the input bitmap
        BitmapShader shader = new BitmapShader(inputBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);

        // Set the shader as the paint shader
        paint.setShader(shader);

        // Draw the circle with the shader
        canvas.drawCircle(width / 2f, height / 2f, Math.min(width, height) / 2f, paint);

        //todo icon pack

        // Recycle the input bitmap if it is not the original bitmap
        if (inputBitmap != originalBitmap) {
            inputBitmap.recycle();
        }
    }

    private static Bitmap drawableToBitmap(Drawable drawable) {
        if (drawable instanceof BitmapDrawable)
            return ((BitmapDrawable) drawable).getBitmap();

        int width = drawable.getIntrinsicWidth();
        int height = drawable.getIntrinsicHeight();

        Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(bitmap);
        drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
        drawable.draw(canvas);

        return bitmap;
    }
}

