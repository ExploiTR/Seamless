package app.exploitr.seamless.graphics;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;

import androidx.annotation.NonNull;
import androidx.concurrent.futures.CallbackToFutureAdapter;
import androidx.work.ListenableWorker;
import androidx.work.WorkerParameters;

import com.google.common.util.concurrent.ListenableFuture;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;

/**
 * A worker class to fetch the Bing daily wallpaper in the background and pass the result back to the caller.
 * <p>
 * This class extends the ListenableWorker class from the AndroidX WorkManager library. It fetches the Bing
 * daily wallpaper data from the Bing API, extracts the image URL, fetches the image bitmap, and passes the
 * result back to the caller through the WallpaperSetCallback interface.
 * <p>
 * The fetched bitmap can then be used to set the wallpaper or perform any other operations as needed by the caller.
 * <p>
 * This class is scheduled to run using WorkManager to execute the task in the background.
 */
public class BingWallpaperWorker extends ListenableWorker {

    private static final String TAG = "BingWallpaperWorker";
    private static final String BING_API_URL = "https://www.bing.com/HPImageArchive.aspx?format=js&idx=0&n=1&mkt=en-US";
    private final WallpaperSetCallback callback;

    /**
     * Constructor to create a BingWallpaperWorker instance with the provided callback.
     *
     * @param context The application context.
     * @param workerParams The worker parameters.
     * @param callback The callback interface to notify the caller.
     */
    public BingWallpaperWorker(@NonNull Context context, @NonNull WorkerParameters workerParams, WallpaperSetCallback callback) {
        super(context, workerParams);
        this.callback = callback;
    }

    /**
     * This method is called when the worker is scheduled to start its work.
     * <p>
     * It fetches the Bing daily wallpaper data from the API, extracts the image URL, fetches the image bitmap,
     * and passes the result back to the caller through the callback interface.
     * <p>
     * @return The result of the work. Either success or failure.
     */
    @NonNull
    @Override
    public ListenableFuture<Result> startWork() {
        return CallbackToFutureAdapter.getFuture(completer -> {
            try {
                URL url = new URL(BING_API_URL);
                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                connection.setRequestMethod("GET");

                int responseCode = connection.getResponseCode();
                if (responseCode == HttpURLConnection.HTTP_OK) {
                    InputStream inputStream = connection.getInputStream();
                    WallpaperData wallpaperData = parseWallpaperData(inputStream);
                    if (wallpaperData != null) {
                        String imageUrl = "https://www.bing.com" + wallpaperData.getImageUrl();
                        Bitmap bitmap = fetchBitmap(imageUrl);
                        if (bitmap != null) {
                            callback.onWallpaperDownloaded(bitmap);
                            return Result.success();
                        }
                    } else {
                        completer.set(Result.failure());
                    }
                } else {
                    completer.set(Result.failure());
                }
            } catch (IOException e) {
                e.printStackTrace();
                completer.set(Result.failure());
            }

            return null; // Return null because we use Completer to set the Result
        });
    }

    /**
     * Fetches the bitmap image from the provided URL.
     *
     * @param imageUrl The URL of the image to fetch.
     * @return The fetched bitmap image, or null if there was an error during the fetch.
     * @throws IOException If an I/O error occurs while fetching the image.
     */
    private Bitmap fetchBitmap(String imageUrl) throws IOException {
        URL url = new URL(imageUrl);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");

        int responseCode = connection.getResponseCode();
        if (responseCode == HttpURLConnection.HTTP_OK) {
            InputStream inputStream = connection.getInputStream();
            return BitmapFactory.decodeStream(inputStream);
        }
        return null;
    }

    /**
     * Parses the wallpaper data from the input stream.
     * <p>
     * This method reads the JSON response from the Bing Wallpaper API and extracts the image URL
     * for the daily wallpaper.
     *
     * @param inputStream The input stream containing the JSON response from the Bing API.
     * @return An instance of WallpaperData containing the extracted image URL, or null if parsing fails.
     */
    private WallpaperData parseWallpaperData(InputStream inputStream) {
        try {
            StringBuilder builder = new StringBuilder();
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                builder.append(new String(buffer, 0, bytesRead));
            }

            JSONObject jsonObject = new JSONObject(builder.toString());
            JSONArray images = jsonObject.getJSONArray("images");
            if (images.length() > 0) {
                JSONObject imageData = images.getJSONObject(0);
                String imageUrl = imageData.optString("url", "");
                return new WallpaperData(imageUrl);
            }
        } catch (IOException | JSONException e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * Represents the relevant data of the Bing daily wallpaper.
     * <p>
     * This class encapsulates the data extracted from the Bing Wallpaper API response for the daily wallpaper.
     * It stores information about the image URL, which is used to fetch the actual wallpaper image.
     */
    public static class WallpaperData {
        private final String imageUrl;

        public WallpaperData(String imageUrl) {
            this.imageUrl = imageUrl;
        }

        public String getImageUrl() {
            return imageUrl;
        }
    }

    /**
     * Interface to provide callbacks for the caller to handle the fetched wallpaper bitmap or any errors.
     */
    public interface WallpaperSetCallback {
        /**
         * Callback method to receive the fetched wallpaper bitmap.
         *
         * @param bitmap The fetched wallpaper bitmap.
         */
        void onWallpaperDownloaded(Bitmap bitmap);
    }
}
